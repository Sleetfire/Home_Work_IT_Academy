package firstTask;

//1.3 Использовать ВСЕ возможные побитовые операции с числами -42 и -15.

public class BitOperation2 {

    public static void main(String[] args) {

        // Чтобы получить -42 в двоичном виде, я использовал двоичное представление 42 = 00101010,
        // делал инверсию ~00101010 = 11010101, а потом прибавлял к младшему биту 1, тогда -42 = 11010110
        // -15 = 11110001

        // Побитовое NOT (~)
        byte a = ~-42; //  ~11010110 = 00101001

        a = ~-15; // ~11110001 = 00001110

        // Побитовый AND (&)
        a = -42 & -15; // 11010110 & 11110001 = 11010000

        // Побитовый AND с присваиванием (&=)
        a = -42;
        a &= -15; // a = 11010110 & 11110001 = 11010000

        // Побитовый OR (|)
        a = -42 | -15; // 11010110 | 11110001 = 11110111

        // Побитовый OR с присваиванием (|=)
        a = -42;
        a |= -15; // a = 11010110 | 11110001 = 11110111

        // Побитовый исключающий OR (^)
        a = -42 ^ -15; // 11010110 ^ 11110001 = 00100111

        // Побитовый исключающий OR с присваиванием (^=)
        a = -42;
        a ^= -15; // a = 11010110 ^ 11110001 = 00100111

        // Сдвиг вправо (>>) для -42 на 2
        a = -42 >> 2; // 11010110 >> 2 = 11110101

        // Сдвиг вправо (>>) для -15 на 2
        a = -15 >> 2; // 11110001 >> 2 = 11111100

        // Сдвиг вправо (>>) для -42 на -15
        a = -42 >> -15; // -1 11111111111111111111111111111111 (ошибка выполнения программы)

        // Сдвиг вправо (>>) для -15 на -42
        a = -15 >> -42; // -1 11111111111111111111111111111111 (ошибка выполнения программы)

        // Сдвиг вправо с присваиванием (>>=) для -42 на 2
        a = -42;
        a >>= 2; // a = 11010110 >> 2 = 11110101

        // Сдвиг вправо с присваиванием (>>=) для -15 на 2
        a = -15;
        a >>= 2; // a = 11110001 >> 2 = 11111100

        // Сдвиг вправо с заполнением нулями (>>>) для -42 на 2
        int aa = -42 >>> 2; // 11010110 >>> 2 = 11110101, int, так как будет переполнение byte

        // Сдвиг вправо с заполнением нулями (>>>) для -15 на 2
        aa = -15 >>> 2; // 11110001 >>> 2 = 11111100

        // Сдвиг вправо с заполнением нулями (>>>) для -42 на -15
        aa = -42 >>> -15; // 32767 111111111111111 (ошибка выполнения программы)

        // Сдвиг вправо с заполнением нулями (>>>) для -15 на -42
        aa = -15 >>> -42; // 1023 1111111111 (ошибка выполнения программы)

        // Сдвиг вправо с заполнением нулями с присваиванием (=>>>) для -42 на 2
        aa = -42;
        aa >>>= 2; // a = 11010110 >>> 2 = 11110101

        // Сдвиг вправо с заполнением нулями с присваиванием (=>>>) для -15 на 2
        aa = -15;
        aa >>>= 2; // a = 11110001 >>> 2 = 11111100

        // Сдвиг влево (<<) для -42 на 2
         aa = -42 << 2; // 11010110 << 2 = 01011000

        // Сдвиг влево (<<) для -15 на 2
        aa = -15 << 2; // 11110001 << 2 = 11000100

        // Сдвиг влево c присваиванием (<<=) для -42 на 2
        aa = -42;
        aa <<= 2; // aa = 11010110 << 2 = 01011000

        // Сдвиг влево c присваиванием (<<=) для -15 на 2
        aa = -15;
        aa <<= 2; // aa = 11110001 << 2 = 11000100

    }
}
